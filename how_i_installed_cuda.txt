#FRESH INSTALL (I used geforce gtx760 on Ubuntu 15.04 amd64), with most recent drivers and setup.

Install prerequisite packages for development *

sudo apt-get install build-essential g++ git libzip-dev libpng12-dev libjpeg-turbo8-dev libjasper-dev libmp4v2-dev cmake  unzip automake libtool libncurses5-dev

try and install recent, only drivers. 
if it succeeds, install the rest of it
otherwise get the right one, do the same steps

Download cuda7.5 for Ubuntu x86_64 from nVidia (https://developer.nvidia.com/cuda-downloads)
Install according the instructions (select runfile local option and follow the steps except no driver install)

if you have nouveau
  sudo vim /etc/modprobe.d/blacklist.conf
  add "blacklist nouveau" to the end
  sudo update-initramfs -u
  apt-get update
  reboot
  kill lightdm again

  if that still doesn't work, sudo vim /etc/modprobe.d/nvidia-graphics-drivers.conf and add the following
    # This file was installed by nvidia-current-updates
    # Do not edit this file manually

    blacklist nouveau
    blacklist lbm-nouveau
    blacklist nvidia-173
    blacklist nvidia-96
    blacklist nvidia-current
    blacklist nvidia-173-updates
    blacklist nvidia-96-updates
    alias nvidia nvidia_current_updates
    alias nouveau off
    alias lbm-nouveau off

  or look at the logfile given for specific errors and google

if unable to locate the kernel source
  http://tleyden.github.io/blog/2014/10/25/cuda-6-dot-5-on-aws-gpu-instance-running-ubuntu-14-dot-04/

nvcc fatal   : Value 'sm_61' is not defined for option 'gpu-architecture
  upgrade to cuda 8.0

if fucking up with libcosa something do sudo ldconfig /usr/local/cuda-*/lib64/

Note: Under Ubuntu 15.10 you may receive an "Unsupported compiler" error when installing the CUDA toolkit
  The above problem can be circumvented by running the shell installer and supplying a suffix "â€“override" to the installer script.

sudo ldconfig /usr/local/cuda/lib64 

sudo -s
echo "/usr/local/cuda/lib64" > /etc/ld.so.conf.d/cuda.conf
ldconfig
ldconfig -p | grep cuda ## this should show libcudart.so.7.5

MAKE SURE NOT TO INSTALL ANYTHING NOT NECESSARY, IF YOU DO:
  If you install nvidia-settings or nvidia-cuda-toolkit you can mess everything up and have to uninstall and start over

  Uninstall all cuda or nvidia drivers, you need nvidia 352 for cuda 7.5
    examples are sudo apt-get purge cuda* or nvidia-*
    -Do this with sudo apt-get purge <pkg> or sudo apt-get remove <pkg>
    -If you do the following steps and you're not getting it to run, do "sudo apt-get install nvidia-352"
  You can "ldconfig -p | grep cuda" to find any that you might want to uninstall as well
    dpkg -S the results to find packages to uninstall if there are any, i.e."dpkg -S /usr/lib32/libcuda.so.1"
  if there is anything like libcuda1-340, remove it with:
    sudo apt-get purge libcuda1-340
    sudo apt-get purge libcuda1-340 --auto-remove

  remove cuda files from /usr/local
  sudo apt-get remove --auto-remove nvidia-cuda-toolkit
  sudo apt-get purge --auto-remove nvidia-cuda-toolkit
  rm /opt/cuda if it exists
  no ~/NVIDIA_GPU_Computing_SDK
  check echo $LD_LIBRARY_PATH to see if there is any cuda

  when you run nvcc now you should see no input files specified
  running /usr/local/cuda/bin/nvcc -V should give:
    darkelement@klein:~$ /usr/local/cuda/bin/nvcc -V
    nvcc: NVIDIA (R) Cuda compiler driver
    Copyright (c) 2005-2015 NVIDIA Corporation
    Built on Tue_Aug_11_14:27:32_CDT_2015
    Cuda compilation tools, release 7.5, V7.5.17

  When you are done, there should only be stuff you can't purge, like
    libicudata.so.52 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libicudata.so.52
    libcuda.so.1 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libcuda.so.1
    libcuda.so (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libcuda.so

    when doing "ldconfig -p | grep cuda | grep -v /usr/local/cuda/lib64"

  Do export | grep -i cuda, should see:
    declare -x PATH="/usr/local/cuda/bin:/usr/local/cuda-7.5/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"

Download theano test file for knowing when you really have it working http://deeplearning.net/software/theano/tutorial/using_gpu.html#testing-theano-with-gpu

Make a ~/.theanorc that looks like this
  [global]
  floatX = float32
  device = gpu0

  [nvcc]
  fastmath = True

  [cuda]
  root=/usr/local/cuda-7.5/  

  [lib]
  cnmem=1

sudo service lightdm stop (or any other desktop env)
  
Install new cuda version from website WITHOUT DRIVER
  sudo sh cuda_runfile.run

  Note:You can also chmod +x ./*.run and then sudo ./runfile
  Note: You can spam space to skip the end of the EULA

add /usr/local/cuda-7.5/bin to your $PATH
  vim ~/.bashrc, end of file add "export PATH=/usr/local/cuda-7.5/bin:$PATH", or replace cuda-7.5 with just cuda, shouldn't matter
  source ~/.bashrc

Restart machine

Test with python test.py

Now to install cuDNN
  Sign up for nvidia advanced developers program under Stark Industries, https://developer.nvidia.com/cudnn
  Download cuDNN v5 (May 12, 2016), for CUDA 7.5
    NOTE: Tensorflow CNN models fail without v4, so get that if you plan on using TensorFlow
  unarchive file
  mv to wherever you want the install path to be
  Go to this install path, i.e. cd /home/darkelement/cuda/
  export LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH
  Do the following:
    export LD_LIBRARY_PATH=/home/user/path_to_CUDNN_folder/lib64:$LD_LIBRARY_PATH
    export CPATH=/home/user/path_to_CUDNN_folder/include:$CPATH
    export LIBRARY_PATH=/home/user/path_to_CUDNN_folder/lib64:$LD_LIBRARY_PATH

ERROR (theano.sandbox.cuda): Failed to compile cuda_ndarray.cu: libcublas.so.8.0: cannot open shared object file: No such file or directory
  https://devtalk.nvidia.com/default/topic/845363/libcublas-so-7-0-cannot-open-shared-object-file/

Test with python test.py

cnmem should already be enabled by last line in theanorc

Should be good by now. Gl, hf

IF YOU NEED TO DOWNLOAD WITH APT
  sudo add-apt-repository ppa:xorg-edgers/ppa -y
  sudo apt-get update
  sudo apt-get install nvidia-<version>
IF YOU CAN'T USE MOST RECENT DRIVERS, this is all I know. I am stuck here as well.
  If you can't use most recent cuda, then look at the log to see what version drivers you can use. 
  Look up the version of cuda you can use http://docs.roguewave.com/totalview/8.14.1/html/index.html#page/User_Guides/totalviewug-about-cuda.31.4.html
  Download right driver http://www.nvidia.com/object/unix.html
    -if you don't know then download the right general one and it will tell you the right one

